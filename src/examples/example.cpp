/*
 * Example application demonstrating the XSD to C++ mapping library
 * 
 * This example assumes you have:
 * 1. Generated C++ code from vehicle.xsd using xsd2cpp
 * 2. Linked against the xsdqt-runtime library
 * 
 * Compile with:
 * qmake && make
 */

#include <QCoreApplication>
#include <QDebug>
#include <QFile>

// Include generated headers (would be generated by xsd2cpp)
#include "XmlDocument.h"
// #include "Fleet.h"
// #include "Vehicle.h"
// #include "Car.h"
// #include "Truck.h"
// #include "Motorcycle.h"

void createFleetExample() {
    qInfo() << "\n=== Creating Fleet from Code ===";
    
    // Note: This is pseudocode - actual types would be generated
    /*
    QSharedPointer<Fleet> fleet = QSharedPointer<Fleet>::create();
    fleet->setName("My Test Fleet");
    
    // Create a car
    QSharedPointer<Car> car = QSharedPointer<Car>::create();
    car->setId("C001");
    car->setLicensePlate("TEST-001");
    car->setYear(2024);
    car->setManufacturer("Example Motors");
    car->setNumDoors(4);
    car->setTrunkCapacity(500.0);
    fleet->addVehicle(car);
    
    // Create a truck
    QSharedPointer<Truck> truck = QSharedPointer<Truck>::create();
    truck->setId("T001");
    truck->setLicensePlate("TEST-002");
    truck->setYear(2023);
    truck->setManufacturer("Truck Company");
    truck->setPayloadCapacity(10000.0);
    truck->setNumAxles(4);
    fleet->addVehicle(truck);
    
    // Save to XML
    XsdQt::XmlDocument<Fleet> doc;
    doc.setRoot(fleet);
    
    QString errorMsg;
    if (doc.saveToFile("my_fleet.xml", &errorMsg)) {
        qInfo() << "Fleet saved successfully to my_fleet.xml";
    } else {
        qWarning() << "Failed to save fleet:" << errorMsg;
    }
    
    // Also save to string for display
    QString xml = doc.saveToString();
    qInfo() << "Generated XML:\n" << xml;
    */
}

void loadFleetExample() {
    qInfo() << "\n=== Loading Fleet from XML ===";
    
    // Note: This is pseudocode - actual types would be generated
    /*
    XsdQt::XmlDocument<Fleet> doc;
    QString errorMsg;
    
    if (!doc.loadFromFile("fleet_sample.xml", &errorMsg)) {
        qWarning() << "Failed to load fleet:" << errorMsg;
        return;
    }
    
    qInfo() << "Fleet loaded successfully!";
    qInfo() << "Fleet name:" << doc.root()->getName();
    
    const auto& vehicles = doc.root()->getVehicles();
    qInfo() << "Number of vehicles:" << vehicles.size();
    
    for (int i = 0; i < vehicles.size(); ++i) {
        auto vehicle = vehicles[i];
        qInfo() << "\nVehicle" << (i + 1) << ":";
        qInfo() << "  ID:" << vehicle->getId();
        qInfo() << "  License:" << vehicle->getLicensePlate();
        qInfo() << "  Year:" << vehicle->getYear();
        qInfo() << "  Manufacturer:" << vehicle->getManufacturer();
        
        // Check if it's a car
        auto car = vehicle.dynamicCast<Car>();
        if (car) {
            qInfo() << "  Type: Car";
            qInfo() << "  Doors:" << car->getNumDoors();
            qInfo() << "  Trunk capacity:" << car->getTrunkCapacity() << "L";
        }
        
        // Check if it's a truck
        auto truck = vehicle.dynamicCast<Truck>();
        if (truck) {
            qInfo() << "  Type: Truck";
            qInfo() << "  Payload:" << truck->getPayloadCapacity() << "kg";
            qInfo() << "  Axles:" << truck->getNumAxles();
        }
        
        // Check if it's a motorcycle
        auto motorcycle = vehicle.dynamicCast<Motorcycle>();
        if (motorcycle) {
            qInfo() << "  Type: Motorcycle";
            qInfo() << "  Engine:" << motorcycle->getEngineCC() << "cc";
            qInfo() << "  Has sidecar:" << (motorcycle->getHasSidecar() ? "Yes" : "No");
        }
    }
    */
}

void modifyAndSaveExample() {
    qInfo() << "\n=== Modifying and Saving ===";
    
    // Note: This is pseudocode - actual types would be generated
    /*
    // Load existing fleet
    XsdQt::XmlDocument<Fleet> doc;
    QString errorMsg;
    
    if (!doc.loadFromFile("fleet_sample.xml", &errorMsg)) {
        qWarning() << "Failed to load fleet:" << errorMsg;
        return;
    }
    
    // Modify the fleet
    doc.root()->setName("Modified Fleet 2024");
    
    // Add a new vehicle
    QSharedPointer<Car> newCar = QSharedPointer<Car>::create();
    newCar->setId("C999");
    newCar->setLicensePlate("NEW-9999");
    newCar->setYear(2024);
    newCar->setManufacturer("New Car Co");
    newCar->setNumDoors(5);
    newCar->setTrunkCapacity(700.0);
    doc.root()->addVehicle(newCar);
    
    // Save modified fleet
    if (doc.saveToFile("modified_fleet.xml", &errorMsg)) {
        qInfo() << "Modified fleet saved to modified_fleet.xml";
    } else {
        qWarning() << "Failed to save:" << errorMsg;
    }
    */
}

void demonstrateTypeConversions() {
    qInfo() << "\n=== Type Conversions ===";
    
    // The library automatically handles conversions between XSD types and C++ types
    qInfo() << "XSD Type Mappings:";
    qInfo() << "  xs:string      -> QString";
    qInfo() << "  xs:int         -> int";
    qInfo() << "  xs:long        -> qint64";
    qInfo() << "  xs:double      -> double";
    qInfo() << "  xs:boolean     -> bool";
    qInfo() << "  xs:dateTime    -> QDateTime";
    qInfo() << "  xs:date        -> QDate";
    qInfo() << "  xs:time        -> QTime";
    qInfo() << "  maxOccurs > 1  -> QList<T>";
    qInfo() << "  Complex types  -> QSharedPointer<T>";
}

void demonstrateInheritance() {
    qInfo() << "\n=== Inheritance and Polymorphism ===";
    
    qInfo() << "The generated code uses C++ inheritance to mirror XSD type extensions:";
    qInfo() << "  VehicleType (base)";
    qInfo() << "    └─ CarType (extends VehicleType)";
    qInfo() << "    └─ TruckType (extends VehicleType)";
    qInfo() << "    └─ MotorcycleType (extends VehicleType)";
    qInfo() << "";
    qInfo() << "Substitution groups allow polymorphic collections:";
    qInfo() << "  QList<QSharedPointer<Vehicle>> can contain Car, Truck, or Motorcycle objects";
    qInfo() << "";
    qInfo() << "The factory pattern automatically creates the correct derived type";
    qInfo() << "based on the XML element name or xsi:type attribute.";
}

int main(int argc, char *argv[]) {
    QCoreApplication app(argc, argv);
    
    qInfo() << "===================================";
    qInfo() << "XSD to C++ Mapping Library Example";
    qInfo() << "===================================";
    
    demonstrateTypeConversions();
    demonstrateInheritance();
    
    qInfo() << "\n=== Usage Instructions ===";
    qInfo() << "1. Generate C++ code from XSD:";
    qInfo() << "   $ ./xsd2cpp -i vehicle.xsd -o generated/ -n MyApp";
    qInfo() << "";
    qInfo() << "2. Include generated headers in your project:";
    qInfo() << "   #include \"generated/Fleet.h\"";
    qInfo() << "   #include \"generated/Vehicle.h\"";
    qInfo() << "";
    qInfo() << "3. Link against xsdqt-runtime library:";
    qInfo() << "   LIBS += -lxsdqt-runtime";
    qInfo() << "";
    qInfo() << "4. Use the API as shown in this example!";
    
    // Uncomment these when you have generated code
    // createFleetExample();
    // loadFleetExample();
    // modifyAndSaveExample();
    
    qInfo() << "\n=== Example Complete ===";
    
    return 0;
}
